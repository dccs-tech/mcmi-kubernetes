parents:
  - aws-node

subnet:
  kube_master_1:
    when_in: "@aws_kube_master_subnets"
    network: "@aws_networks"
    cidr_prefix: "@kube_master_subnet_cidr_prefix"
    zone_suffix: a
    use_public_ip: "@kube_master_subnet_public_ip"
    groups: kube-master

  kube_master_2:
    when_in: "@aws_kube_master_subnets"
    network: "@aws_networks"
    cidr_prefix: "@kube_master_subnet_cidr_prefix"
    zone_suffix: b
    use_public_ip: "@kube_master_subnet_public_ip"
    groups: kube-master

  kube_master_3:
    when_in: "@aws_kube_master_subnets"
    network: "@aws_networks"
    cidr_prefix: "@kube_master_subnet_cidr_prefix"
    zone_suffix: c
    use_public_ip: "@kube_master_subnet_public_ip"
    groups: kube-master

firewall:
  kube_master_external:
    network: "@aws_networks"
    groups: kube-master
    rules:
      api_in:
        mode: ingress
        protocol: tcp
        from_port: "@kube_master_api_port"
        to_port: "@kube_master_api_port"

  kube_master_internal:
    requires: kube_master_external
    network: "@aws_networks"
    groups: kube-master
    rules:
      api_in:
        mode: ingress
        protocol: tcp
        from_port: "@kube_master_api_port"
        to_port: "@kube_master_api_port"
        cidrs: "&subnet:@aws_kube_master_subnets,@aws_kube_node_subnets:cidr"
      scheduler_in:
        mode: ingress
        protocol: tcp
        from_port: "@kube_master_scheduler_port"
        to_port: "@kube_master_scheduler_port"
        cidrs: "&subnet:@aws_kube_master_subnets,@aws_kube_node_subnets:cidr"
      controller_in:
        mode: ingress
        protocol: tcp
        from_port: "@kube_master_controller_port"
        to_port: "@kube_master_controller_port"
        cidrs: "&subnet:@aws_kube_master_subnets,@aws_kube_node_subnets:cidr"

load_balancer:
  kube:
    provider: aws_application
    network: "@aws_networks"
    subnets: "@aws_kube_master_subnets"
    domain: "@root_domain"
    internal: false
    idle_timeout: "@aws_load_balancer_timeout"
    groups: kube-master
    firewalls:
      - internet
      - kube_master_external
    listeners:
      https:
        port: "@kube_master_api_port"
        certificate: kube
        target_port: "@kube_master_api_port"
        target_protocol: https
        health_check_path: "@aws_load_balancer_health_path"
        health_check_interval: "@aws_load_balancer_health_check_interval"
        health_check_timeout: "@aws_load_balancer_health_timeout"
        healthy_status: "@aws_load_balancer_healthy_status"
        healthy_threshold: "@aws_load_balancer_healthy_threshold"
        unhealthy_threshold: "@aws_load_balancer_unhealthy_threshold"

server:
  kube_master:
    count: 1
    provider: ec2_lb
    network: "@aws_networks"
    subnet: "@aws_kube_master_subnets"
    image: "@aws_ubuntu_image[<network>]"
    ssh_port: "@ssh_port"
    user: "@aws_ubuntu_user"
    machine: "@aws_kube_master_machine"
    tenancy: "@aws_kube_master_tenancy"
    monitoring: "@aws_kube_master_monitoring"
    ebs_type: "@aws_kube_master_ebs_type"
    ebs_size: "@aws_kube_master_ebs_size"
    ebs_iops: "@aws_kube_master_ebs_iops"
    ebs_iops: "@aws_kube_master_ebs_iops"
    ebs_optimized: "@aws_kube_master_ebs_optimized"
    ebs_encrypted: "@aws_kube_master_ebs_encrypted"
    load_balancer: kube
    load_balancer_listener: https
    groups:
      - etcd
      - kube-master
    firewalls:
      - internet
      - ssh_external
      - etcd_internal
      - kubelet_internal
      - kube_master_internal
      - kube_node_internal
      - weave_internal
